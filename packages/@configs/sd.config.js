/**
 * Style Dictionary Configuration
 *
 * This file configures Style Dictionary to transform design tokens from JSON
 * into platform-specific formats (Tailwind CSS, JS/TS theme modules).
 *
 * @typedef {import('style-dictionary')} StyleDictionary
 */

// eslint-disable-next-line @typescript-eslint/no-var-requires
const StyleDictionary = require('style-dictionary');

// Register custom transforms
StyleDictionary.registerTransform({
  name: 'size/px',
  type: 'value',
  matcher: token => {
    return token.unit === 'px' || token.value.toString().includes('px');
  },
  transformer: token => {
    return token.value;
  },
});

StyleDictionary.registerTransform({
  name: 'size/percent',
  type: 'value',
  matcher: token => {
    return token.value.toString().includes('%');
  },
  transformer: token => {
    return token.value;
  },
});

// Register the 'js' transform group
StyleDictionary.registerTransformGroup({
  name: 'js',
  transforms: ['attribute/cti', 'name/cti/pascal', 'size/px', 'size/percent'],
});

// Register custom formats

// Format for Tailwind CSS config
StyleDictionary.registerFormat({
  name: 'tailwind/js',
  formatter: ({ dictionary }) => {
    const colors = {};
    const spacing = {};
    const borderRadius = {};
    const fontSize = {};
    const fontWeight = {};
    const lineHeight = {};
    const boxShadow = {};

    // Process color tokens
    dictionary.allTokens
      .filter(token => token.type === 'color' || token.path[0] === 'color')
      .forEach(token => {
        const path = token.path.join('.');
        colors[path] = token.value;

        // Add simplified color names for reference colors
        if (token.path[0] === 'color' && token.path[1] === 'ref' && token.path[2] === 'light') {
          const colorName = token.path[3];
          colors[colorName] = token.value;
        }
      });

    // Process spacing tokens
    dictionary.allTokens
      .filter(token => token.path[0] === 'spacing')
      .forEach(token => {
        const name = token.path.slice(1).join('.');
        spacing[name] = token.value;
      });

    // Process border radius tokens
    dictionary.allTokens
      .filter(token => token.path[0] === 'borderRadius')
      .forEach(token => {
        const name = token.path.slice(1).join('.');
        borderRadius[name] = token.value;
      });

    // Process typography tokens
    dictionary.allTokens
      .filter(token => token.path[0] === 'typography' && token.path[1] === 'fontSize')
      .forEach(token => {
        const name = token.path.slice(2).join('.');
        fontSize[name] = token.value;
      });

    dictionary.allTokens
      .filter(token => token.path[0] === 'typography' && token.path[1] === 'fontWeight')
      .forEach(token => {
        const name = token.path.slice(2).join('.');
        fontWeight[name] = token.value;
      });

    dictionary.allTokens
      .filter(token => token.path[0] === 'typography' && token.path[1] === 'lineHeight')
      .forEach(token => {
        const name = token.path.slice(2).join('.');
        lineHeight[name] = token.value;
      });

    // Process shadow tokens
    dictionary.allTokens
      .filter(token => token.path[0] === 'shadow')
      .forEach(token => {
        const name = token.path.slice(1).join('.');
        boxShadow[name] = token.value;
      });

    return `module.exports = {
  theme: {
    extend: {
      colors: ${JSON.stringify(colors, null, 2)},
      spacing: ${JSON.stringify(spacing, null, 2)},
      borderRadius: ${JSON.stringify(borderRadius, null, 2)},
      fontSize: ${JSON.stringify(fontSize, null, 2)},
      fontWeight: ${JSON.stringify(fontWeight, null, 2)},
      lineHeight: ${JSON.stringify(lineHeight, null, 2)},
      boxShadow: ${JSON.stringify(boxShadow, null, 2)},
    }
  }
};`;
  },
});

// Format for JavaScript/TypeScript theme module
StyleDictionary.registerFormat({
  name: 'js/theme-module',
  formatter: ({ dictionary }) => {
    return `/**
 * Generated Theme Module
 * Auto-generated by Style Dictionary
 */

export const theme = ${JSON.stringify(dictionary.tokens, null, 2)};
`;
  },
});

// Format for TypeScript declarations
StyleDictionary.registerFormat({
  name: 'typescript/module-declarations',
  formatter: ({ dictionary }) => {
    return `/**
 * Generated TypeScript Declarations
 * Auto-generated by Style Dictionary
 */

export declare const theme: ${JSON.stringify(dictionary.tokens, null, 2)};
`;
  },
});

// Main configuration
module.exports = {
  source: ['tokens/**/*.json'],
  platforms: {
    // Tailwind CSS configuration
    tailwind: {
      transformGroup: 'js',
      buildPath: 'dist/',
      files: [
        {
          destination: 'tailwind-tokens.js',
          format: 'tailwind/js',
        },
      ],
    },
    // JavaScript/TypeScript theme module
    js: {
      transformGroup: 'js',
      buildPath: 'dist/',
      files: [
        {
          destination: 'theme.js',
          format: 'js/theme-module',
        },
      ],
    },
    // TypeScript declarations
    ts: {
      transformGroup: 'js',
      buildPath: 'dist/',
      files: [
        {
          destination: 'theme.d.ts',
          format: 'typescript/module-declarations',
        },
      ],
    },
  },
};
